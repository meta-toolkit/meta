/**
 * @file topic_model.h
 * @author Matt Kelly
 *
 * All files in META are dual-licensed under the MIT and NCSA licenses. For more
 * details, consult the file LICENSE.mit and LICENSE.ncsa in the root of the
 * project.
 */

#ifndef META_TOPICS_TOPICS_H_
#define META_TOPICS_TOPICS_H_

#include <istream>
#include <vector>

#include "cpptoml.h"
#include "meta/config.h"
#include "meta/util/string_view.h"
#include "meta/util/aligned_allocator.h"

namespace meta
{
namespace topics
{

struct term
{
	std::size_t tid;
	double probability;
};

struct topic
{
	std::size_t tid;
	double probability;
};

/**
* A read-only model for accessing topic models.
*/
class topic_model
{
	public:

		/**
		* Load topic models from files.
		*
		* @param theta The stream to read the vocabulary from
		* @param phi The stream to read the vectors from
		*/
		// TODO: Store everything in one file? Do we get anything
		// out of two distinct files?
		topic_model(std::istream& theta, std::istream& phi);

		/**
		* @param topic_id The topic to use  
		* @param k The number of words to return
		* @return the top k most probable words in the topic
		*/
		std::vector<term> top_k(std::size_t topic_id,
										std::size_t k = 10) const;

		/**
		* @param doc_id The document we are concerned with
		* @return The probability of each of k topics for the 
		* given document
		*/
		std::vector<topic> topic_distribution(std::size_t doc) const;

		/**
		* @param topic_id The topic we are concerned with
		* @param topic_id The term we are concerned with
		* @return The probability of the term for the given topic
		*/
		term term_probability(std::size_t topic_id,
									 util::string_view term) const;

		/**
		* @param topic_id The document we are concerned with
		* @param topic_id The topic we are concerned with
		* @return The probability for the given topic
		*/
		// TODO: Would the probability of the topic over all documents
		// be useful? Duplicate this function but remove the doc param?
		topic topic_probability(std::size_t doc,
										std::size_t topic_id) const;

		/**
		 * @return the topics generated by this topic model
		 */
		const std::vector<std::size_t>& topics() const;

		const std::size_t num_topics() const;
	
	private:

		// Try turning this into an aligned vector if that 
		// access patterns permit...
		std::vector<util::aligned_vector<double>> topic_term_probabilities_;
		
		/**
		* The number of topics.
		*/
		const std::size_t num_topics_;

		/**
		* The number of total unique words.
		*/
		const std::size_t num_words_;
};

class topic_model_exception : public std::runtime_error
{
	public:
		using std::runtime_error::runtime_error;
};

topic_model load_topic_model(const cpptoml::table& config);

}
}

#endif
